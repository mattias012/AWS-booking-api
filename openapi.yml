# Specifies the OpenAPI version used for the specification
openapi: 3.0.0

# Basic information about the API, including a detailed description as README
info:
  title: Booking API               # Name of the API
  version: "1.0.0"                 # Version of the API
  description: |
    # Booking API Documentation

    **Version:** 1.0.0  
    **Description:** The Booking API provides a way to manage hotel bookings. Availability is set up for 30 days forwards. The API allows users to create, update, retrieve, and delete bookings, as well as check room availability for specific dates.

    ### Endpoints

    - **/bookings**: Create, update, retrieve, or delete a booking by ID.
    - **/rooms/availability**: Check room availability for specific dates.
    - **/allBookings**: Retrieve all bookings.

    ### Test the API

    You can test each endpoint using the live links below, which point to our AWS deployment environment. Make sure to include your API key in the request headers where necessary.

    - **Create a Booking:** [POST /bookings](https://mgn5egdnv0.execute-api.eu-north-1.amazonaws.com/dev/bookings)
    - **Get a Booking by ID:** [GET /bookings/{id}](https://mgn5egdnv0.execute-api.eu-north-1.amazonaws.com/dev/bookings/{id})
    - **Update a Booking:** [PUT /bookings/{id}](https://mgn5egdnv0.execute-api.eu-north-1.amazonaws.com/dev/bookings/{id})
    - **Delete a Booking:** [DELETE /bookings/{id}](https://mgn5egdnv0.execute-api.eu-north-1.amazonaws.com/dev/bookings/{id})
    - **Check Room Availability:** [GET /rooms/availability](https://mgn5egdnv0.execute-api.eu-north-1.amazonaws.com/dev/rooms/availability)
    - **Retrieve All Bookings:** [GET /allBookings](https://mgn5egdnv0.execute-api.eu-north-1.amazonaws.com/dev/allBookings)

    ### Response Codes

    - **200**: Success
    - **201**: Created (for successful bookings)
    - **400**: Bad request (validation errors)
    - **404**: Not found (when a booking ID does not exist)
    - **500**: Server error

servers:
  - url: https://mgn5egdnv0.execute-api.eu-north-1.amazonaws.com/dev
    description: AWS deployment environment

# Paths section contains all the endpoints for the API
paths:
  # Endpoint for creating a new booking
  /bookings:
    post:                           # HTTP method for creating a booking (POST)
      summary: Create a new booking     # Short summary of this operation
      requestBody:                  # Description of the request body (data the client needs to send)
        required: true              # Indicates this request body is mandatory
        content:                    # Specification of the type of data accepted
          application/json:         # Media type (JSON in this case)
            schema:                 # Structure for the request body
              type: object          # The data type is an object
              properties:           # List of fields in the request body
                guestName:
                  type: string      # Data type for guestName is a string
                guestCount:
                  type: integer     # Data type for guestCount is an integer
                roomType:
                  type: string      # Data type for roomType is a string
                roomCount:
                  type: integer     # Data type for roomCount is an integer
                checkInDate:
                  type: string
                  format: date      # Data type is a date
                checkOutDate:
                  type: string
                  format: date
              required:
                - guestName
                - guestCount
                - roomType
                - roomCount
                - checkInDate
                - checkOutDate
            example:
              guestName: "David Svensson"
              email: "david@ma23.se"
              guestCount: 1
              roomType: "single"
              roomCount: 1
              checkInDate: "2024-11-20"
              checkOutDate: "2024-11-22"
      responses:                    # Possible responses from the server
        '201':                      # HTTP status code 201 for a created booking
          description: Booking created successfully
        '400':                      # HTTP status code 400 for a bad request
          description: Bad request
        '500':                      # HTTP status code 500 for a server error
          description: Server error

  # Endpoint for retrieving a booking based on ID
  /bookings/{id}:
    get:                            # HTTP method to retrieve data (GET)
      summary: Get a booking by ID
      parameters:                   # List of parameters required in the URL
        - name: id                  # Specifies the location of the parameter (in this case, in the path)
          in: path                  # Name of the parameter
          required: true            # Parameter is mandatory
          schema:
            type: string            # Data type for id is a string
      responses:
        '200':                      # HTTP status code 200 for successful retrieval
          description: Booking retrieved successfully
          content:
            application/json:
              example:
                bookingId: "123"
                email: "david@ma23.se"
                guestName: "David Svensson"
                guestCount: 1
                roomType: "single"
                roomCount: 1
                checkInDate: "2024-11-20"
                checkOutDate: "2024-11-22"
        '404':                      # HTTP status code 404 if the booking is not found
          description: Booking not found
        '500':                      # HTTP status code 500 for a server error
          description: Server error

    put:                            # HTTP method to update data (PUT)
      summary: Update a booking by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                guestName:
                  type: string
                guestCount:
                  type: integer
                roomType:
                  type: string
                roomCount:
                  type: integer
                checkInDate:
                  type: string
                  format: date
                checkOutDate:
                  type: string
                  format: date
              required:
                - guestName
                - email
                - guestCount
                - roomType
                - roomCount
                - checkInDate
                - checkOutDate
            example:
              guestName: "David Svensson"
              email: "david@ma23.se"
              guestCount: 2
              roomType: "double"
              roomCount: 1
              checkInDate: "2024-11-20"
              checkOutDate: "2024-11-22"
      responses:
        '200':
          description: Booking updated successfully
        '400':
          description: Bad request
        '404':
          description: Booking not found
        '500':
          description: Server error

    delete:                         # HTTP method to delete data (DELETE)
      summary: Delete booking by ID
      description: Deletes a booking by its unique ID.
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID of the booking
      responses:
        "200":
          description: Booking deleted successfully
        "404":
          description: Booking not found
        "500":
          description: Server error

  # Endpoint to check room availability
  /rooms/availability:
    get:                            # HTTP method to retrieve availability (GET)
      summary: Get available rooms
      description: Retrieves availability of rooms for specified dates.
      parameters:
        - in: query                 # The parameter is in the query part of the URL
          name: startDate
          schema:
            type: string
            format: date
          required: true
          description: Start date for availability check
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          required: true
          description: End date for availability check
        - in: query
          name: roomType
          schema:
            type: string
          required: false
          description: Type of room to check availability for
      responses:
        "200":
          description: Room availability retrieved successfully
          content:
            application/json:
              example:
                roomType: "single"
                availableRooms: 5
                startDate: "2024-12-01"
                endDate: "2024-12-05"
        "400":
          description: Invalid date range or parameters
        "500":
          description: Server error

  /allBookings:
    get:
      summary: Retrieve all bookings
      description: Retrieves all bookings in the system.
      parameters:
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          required: true
          description: Start date for bookings retrieval
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          required: true
          description: End date for bookings retrieval
      responses:
        '200':
          description: All bookings retrieved successfully
          content:
            application/json:
              example:
                - bookingId: "123"
                  email: "david@ma23.se"
                  guestName: "David Svensson"
                  guestCount: 1
                  roomType: "single"
                  roomCount: 1
                  checkInDate: "2024-11-20"
                  checkOutDate: "2024-11-22"
                - bookingId: "124"
                  email: "aws@amazon.com"
                  guestName: "aws amazon"
                  guestCount: 2
                  roomType: "double"
                  roomCount: 1
                  checkInDate: "2024-12-10"
                  checkOutDate: "2024-12-15"
        '500':
          description: Server error
